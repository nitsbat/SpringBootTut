Spring boot is a way in a which we can bootstrap or start a enterprise level project. It is used to make production grade spring applications 
that we can run. We can build or create an api using this. e.g we have made a course management api in example.


Spring MVC is a child project of whole spring framework and it lets us to create a server side code which helps us to
map the url with our code and provide responses like Rest api response in form of JSON or a whole html web page.



Problems with spring 

1) Huge framework
2) Lot of setup and configuration steps.
3) Lot of deploy steps.

So its Spring boot is a bootstrap to our application. Whenever we make an application in spring boot, it creates an standalone project.
Don't nned to deploy , the server will run on its own. Its totally a production ready code.


***********************************************************************************

When we create a spring boot project using maven we generally give the parent pom.
It is because the spring developers had already made a starter pack which contains pre properties and configurations to just start
building your application, hence we give the pre define pom as the parent in our pom.
So the parent pom will be like 
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.4</version>
    </parent>
	
	and our pom will be the child pom of this.
The parent just pulls out the configurations. You don't have to give the version numbers of the dependencies once you gave the parent maven.
This is like there will be some jars with their corresponding versions. So we just want to know the version of the parent. So this is called the
Bill of materials. THis will include the Embedded Tomcat Server.
****************************************************************************************


To start with the boot application we will need a main class. Now the steps involve in running an api server is 
1) create a servelet
2) Deploy in tomcat server and run it on some port.

What is a Java or Jakarta Servelet.?
It can be think of an API which contains many interfaces and classes, extending the capability of servers and responds to incoming request.
It needs to be deployed on the server to create a dynamic web page. This is very much used in building the web application.

But in spring it can be just done with the single command i.e         SpringApplication.run(CourseApiMainApp.class, args);
we can run this from the main class as application and it internally starts the tomcat server and run it.

But we need to specify first that this main class is actually the spring boot application main class.
So it can be done through an annotation @SpringBootApplication.

Now what happens when we run SpringApplication.run(CourseApiMainApp.class, args);

Firstly the SpringApplication is a static class.

1)It setups the default configuration. The default configuration and properties it takes from the parent starter pack.
2)It initialise and creates the Spring application context which means creates the IOC container.
3) performs the classpath scan :- this means that when we started the main class we gave an annotation to make spring recognise that it's the main
	class, so this internally scan for the classpath and gave that this class is the main SpringApplication class, similarly for other annotations it 
	will give the classpath automatically.
4)Starts the Tomcat server. We know from above that after making a servelet we need a server to deply it to the web.

********************************* REST CONTROLLER *********************************

So our applictaion is not doing anything till now. So what we want is we are requesting something from our application
, therefore our application needs to give response on some url request which is done by the controller.

Rest controller in spring is a java class with some annotations. It has information about 
what URL access triggers it and what method to run after accessing it.

When we give a @RestController annotation to a class it means that that class will act as a controller 
and now it will contain methods which will be mapped to my URL. Mapping is done through @RequestMapping url.

@RequestMapping - this annotation only maps the GET method of http request by default. To map other http methods, we have
to specify it in the annotations.

There will be no requirement of mapping other than annotaions in controller class as we already know that we already had a mapping
of SpringApplication which will scan the classpaths and register this class as controller.

But one key point here is that this controller should also be in the same package of Main class. It is because the 
@SprintBootApplication groups three annotations @EnableAutoConfiguration, @Configuration and @ComponentScan. 
@ComponentScan is responsible to scan the package where the application is located in order to find all Components. 


Whenever we return the object or the list object from the RequestMapping method , it will convert it into JSON automatically by Spring MVC.
The generated JSON will be having the key value pair based on the class pojo.


******************************** SPRING MVC Controller *********************************

Spring MVC maps all the requests/Url's coming from client to the methods. The controller is a java class with some annotations. It has URI and http
method and has information about what URL access triggers it and what method(http) to run after accessing it.

REST Api - before building it, we have to identify the resources or contract. Alsoo look at the consumers can access that resource. the resource was 
			Topic , that string, Course , Lesson.
			Now for Topics we can do following request :
			
			GET		/topics			get all the topics.
			GET     /topics/id		get the topic of that id.
			POST 	/topics			create a new topic.
			PUT		/topics/id		Updates the topic.
			DELETE	/topics/id		Deletes the topic.

******************************* BUSINESS SERVICE *********************************

Concept of business service in spring is that it is a singleton class which spring creates when we start springand then it registers or keeps that 
instance in its memory.
the concept of singleton class is like only one instance will be instantiated and only that instance will be accessed by all the classes who are 
asking for accessing that instance. Its not gonna create a new instance everytime coz its a singleton.
So declaring a calss as business service is through the @Service annotation and then we can easily inject that instance in another class through
autowire.

To implement get request with an id like this

GET     /topics/id		get the topic of that id.

First we need to give the variable in the @RequestMapping annotation and that is inside the curly braces. like @RequestMapping("/topic/{id}")
Then to know that this id is actually the String variable parameter which is passed is done through the parameter in the method and then annotate
with the @PathVariable annotation. like this :-  public Topic getAllTopics(@PathVariable String id)

